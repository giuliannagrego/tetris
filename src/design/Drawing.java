package src.design;

import java.util.Random;

public class Drawing {

    // Types of tetris pieces
    public enum TetrisShape {NoPiece, ZPiece, SPiece, LinePiece, TPiece, SquarePiece, LPiece, LMirroredPiece}

    // Create piece
    private TetrisShape pieceDrawing;
    // Create Drawing coordinates
    private int[][] coordinates;
    // Creates a coordinate table
    private int[][][] coordinatesTable;

    // Method that resets the coordinates and the drawing
    public Drawing() {
        // New 4 x 2 coordinate, 4 represents four squares of the drawing and 2 represents the plane (x, y)
        coordinates = new int[4][2];
        // Sets shape to no drawing
        setDraw(TetrisShape.NoPiece);
    }

    // Defines a design for the part
    public void setDraw(TetrisShape drawing) {
        // Map of possible designs for each part, where each line is a design, each column represents a part
        // and each ballot represents the plane (x, y)
        coordinatesTable = new int[][][] {
                {{0,0}, {0,0}, {0,0}, {0,0}},
                {{0,-1}, {0,0}, {-1,0}, {-1,1}},
                {{0,-1}, {0,0}, {1,0}, {1,1}},
                {{0,-1}, {0,0}, {0,1}, {0,2}},
                {{-1,0}, {0,0}, {1,0}, {0,1}},
                {{0,0}, {1,0}, {0,1}, {1,1}},
                {{-1,1}, {0,-1}, {0,0}, {0,1}},
                {{1,-1}, {0,-1}, {0,0}, {0,1}},
        };

        // Set the drawing coordinates
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 2; j++ ) {
                coordinates[i][j] = coordinatesTable[drawing.ordinal()][i][j];
            }
        }

        // Associates the part with the drawing
        pieceDrawing = drawing;
    }

    // Manipulates the x and y of the drawing
    private void setX(int index, int x) {coordinates[index][0] = x; }
    private void setY(int index, int y) {coordinates[index][1] = y; }

    // Returns x and y of the drawing
    public int x(int index) {return coordinates[index][0];}
    public int y(int index) {return coordinates[index][1];}

    // Return the drawing
    public TetrisShape getDrawing() {return pieceDrawing;}

    // Create a random design
    public void setRandomDesign(){
        //Set a random
        Random r = new Random();

        // Calculates a random value from 0 to 7
        int x = Math.abs(r.nextInt()) % 7 + 1;

        // Creates a table with drawing possibilities
        TetrisShape[] value = TetrisShape.values();

        // Defines only the drawing generated by the random number
        setDraw(value[x]);
    }

    // Returns the minimum x coordinate
    public int minX() {
        int min = coordinates[0][0];

        for (int i = 0; i < 4; i++) {
            min = Math.min(min, coordinates[i][0]);
        }

        return min;
    }

    // Returns the minimum y coordinate
    public int minY() {
        int min = coordinates[0][1];

        for (int i = 0; i < 4; i++) {
            min = Math.min(min, coordinates[i][1]);
        }

        return min;
    }

    // Rotate the drawing to the left
    public  Drawing rotateLeft() {

        // If the piece is square, it will not rotate
        if (pieceDrawing == TetrisShape.SquarePiece) {
            return this;
        }

        // Create a result
        Drawing result = new Drawing();

        // Links the result with the part
        result.pieceDrawing = pieceDrawing;

        // Inverts coordinate values
        for (int i = 0; i < 4; i++) {

            result.setX(i, y(i));
            result.setY(i, -x(i));
        }

        // Returns the inverted drawing
        return result;
    }

    // Rotate the drawing to the right
    public  Drawing rotateRight() {

        // If the piece is square, it will not rotate
        if (pieceDrawing == TetrisShape.SquarePiece) {
            return this;
        }

        // Create a result
        Drawing result = new Drawing();

        // Links the result with the part
        result.pieceDrawing = pieceDrawing;

        // Inverts coordinate values
        for (int i = 0; i < 4; i++) {

            result.setX(i, -y(i));
            result.setY(i, x(i));
        }

        // Returns the inverted drawing
        return result;
    }
}
